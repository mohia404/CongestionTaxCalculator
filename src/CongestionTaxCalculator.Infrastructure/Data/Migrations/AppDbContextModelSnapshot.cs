// <auto-generated />
using System;
using CongestionTaxCalculator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTaxCalculator.Domain.City.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.City.City", b =>
                {
                    b.OwnsMany("CongestionTaxCalculator.Domain.City.Entities.TaxRulesPerYear", "TaxRulesPerYears", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<string>("TaxFreeDays")
                                .IsRequired()
                                .HasColumnType("varchar(max)");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("CityId");

                            b1.ToTable("TaxRulesPerYears", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CityId");

                            b1.OwnsMany("CongestionTaxCalculator.Domain.City.ValueObjects.FixedCongestionTaxAmount", "FixedCongestionTaxAmounts", b2 =>
                                {
                                    b2.Property<TimeOnly>("FromTime")
                                        .HasColumnType("time");

                                    b2.Property<TimeOnly>("ToTime")
                                        .HasColumnType("time");

                                    b2.Property<Guid>("TaxRulesId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("TaxAmount")
                                        .HasColumnType("int");

                                    b2.HasKey("FromTime", "ToTime", "TaxRulesId");

                                    b2.HasIndex("TaxRulesId");

                                    b2.ToTable("FixedCongestionTaxAmounts", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("TaxRulesId");
                                });

                            b1.OwnsMany("CongestionTaxCalculator.Domain.City.ValueObjects.Vehicle", "TaxFreeVehicles", b2 =>
                                {
                                    b2.Property<string>("Name")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<Guid>("TaxRulesId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Name", "TaxRulesId");

                                    b2.HasIndex("TaxRulesId");

                                    b2.ToTable("TaxFreeVehicles", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("TaxRulesId");
                                });

                            b1.Navigation("FixedCongestionTaxAmounts");

                            b1.Navigation("TaxFreeVehicles");
                        });

                    b.Navigation("TaxRulesPerYears");
                });
#pragma warning restore 612, 618
        }
    }
}
